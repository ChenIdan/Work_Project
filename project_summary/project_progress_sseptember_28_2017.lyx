#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass amsart
\begin_preamble
\usepackage{culmus}
\usepackage{lmodern}
\usepackage[T1]{fontenc}
\usepackage{algorithmic}
\usepackage{amsmath} 
\usepackage{siunitx}
\usepackage{layout}
\usepackage{graphicx}
\usepackage{relsize,exscale}
\usepackage{scalerel}
\def\stretchint#1#2#3{\vcenter{\hbox{\stretchto[440]{\displaystyle\int\limits_#2^#3}{#1}}}}
\def\scaleint#1#2#3{\vcenter{\hbox{\scaleto[3ex]{\displaystyle\int\limits_#2^#3}{#1}}}}
\newcommand{\minus}{\scalebox{0.75}[1.0]{$-$}}
\sloppy 
\nobreak
\end_preamble
\use_default_options true
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
lyxNotebookCellPythonTwo
algorithm2e
fixme
fix-cm
changebars
\end_modules
\maintain_unincluded_children false
\begin_local_layout

\end_local_layout
\language english
\language_package default
\inputencoding default
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family rmdefault
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 1.5cm
\rightmargin 2cm
\bottommargin 1.5cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 2
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
project progress- 28/09/17
\end_layout

\begin_layout Standard
We changed the way in which we calculate the joint probability matrix.
\end_layout

\begin_layout Standard
In the beginning of the project, we calculated the joint probability matrix
 in the next way:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\series bold
\bar under
Algorithm 1: 
\series default
Calculate joint probability matrix with an initial probability distribution
 of zero
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{algorithmic}
\end_layout

\begin_layout Plain Layout


\backslash
STATE{$
\backslash
textbf{input}: 
\backslash
textbf{seqMats}, 
\backslash
textbf{n} $}
\end_layout

\begin_layout Plain Layout


\backslash
COMMENT {$
\backslash
textbf{seqMats}$ - array with the sequences matrices, $
\backslash
textbf{n}$- number of sequences entered}
\end_layout

\begin_layout Plain Layout


\backslash
STATE{$
\backslash
textbf{arr}
\backslash
hspace{2mm}  joint = 
\backslash
underline{0} $} 
\end_layout

\begin_layout Plain Layout


\backslash
COMMENT {joint is the joint probability matrix.
 right now it is a zero filled matrix}
\end_layout

\begin_layout Plain Layout


\backslash
FOR{$i=0$ 
\backslash
TO $i=n-1$}
\end_layout

\begin_layout Plain Layout


\backslash
STATE {joint += seqMats[i]}
\end_layout

\begin_layout Plain Layout


\backslash
ENDFOR
\end_layout

\begin_layout Plain Layout


\backslash
STATE{$joint = 
\backslash
left(
\backslash
frac{1}{n}
\backslash
right)
\backslash
cdot{joint}$}
\end_layout

\begin_layout Plain Layout


\backslash
RETURN joint
\end_layout

\begin_layout Plain Layout


\backslash
end{algorithmic}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
But we were encountered by the next problem - some joint probabilities were
 
\begin_inset Formula $0$
\end_inset

 , which caused for run time errors of division by zero at the process of
 calculating the conditioned probabilities, because, according to base rule
 for conditioned probability, 
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
P\left(A\lvert B\right)=\frac{P(A\cap B)}{P(A)}
\]

\end_inset


\end_layout

\begin_layout Standard
and if 
\begin_inset Formula $P(A)=0$
\end_inset

, the conditioned probability will not be defined.
 
\end_layout

\begin_layout Standard
Our general approach for fixing the problem is that instead of a zero only
 initial probability distribution, we will assume that the initial distribution
 is uniform.
 We decided to use this approach also from a biological considerations.
\end_layout

\begin_layout Standard
After some trial and error, we came by this implementation for our algorithm:
\end_layout

\begin_layout Standard
Let's assume that in addition to the sequences that the user entered as
 input, we also got all the possible sequences of the required length, and
 then, we add their sequences matrices for our joint probabilities calculation
 in 
\series bold
Algorithm 1 .
 
\series default
of course that then we will divide the matrices sum by the number of all
 possible sequences of the required length, and also the sequence matrices
 that we derived from the sequences that were given by the user.
 
\end_layout

\begin_layout Standard
Than, our algorithm looked something like this:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\series bold
\bar under
Algorithm 2: 
\series default
Calculate joint probability matrix with a uniform initial probability distributi
on
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{algorithmic}
\end_layout

\begin_layout Plain Layout


\backslash
STATE{$
\backslash
textbf{input}: 
\backslash
textbf{seqMats}, 
\backslash
textbf{n}, 
\backslash
textbf{uni}, 
\backslash
textbf{len} $}
\end_layout

\begin_layout Plain Layout


\backslash
COMMENT {$
\backslash
textbf{seqMats}$ - array with the sequences matrices, $
\backslash
textbf{n}$- number of sequences entered,$
\backslash
textbf{uni}$ - sum of all possible sequence matrices $
\backslash
textbf{len}$ -length of the sequence}
\end_layout

\begin_layout Plain Layout


\backslash
STATE{$
\backslash
textbf{arr}
\backslash
hspace{2mm}  joint = 
\backslash
underline{0} $} 
\end_layout

\begin_layout Plain Layout


\backslash
COMMENT {joint is the joint probability matrix.
 right now it is a zero filled matrix}
\end_layout

\begin_layout Plain Layout


\backslash
FOR{$i=0$ 
\backslash
TO $i=n-1$}
\end_layout

\begin_layout Plain Layout


\backslash
STATE {joint += seqMats[i]}
\end_layout

\begin_layout Plain Layout


\backslash
ENDFOR
\end_layout

\begin_layout Plain Layout


\backslash
STATE{joint+=uni}
\end_layout

\begin_layout Plain Layout


\backslash
STATE{$joint = 
\backslash
left(
\backslash
frac{1}{n+4^{len}}
\backslash
right)
\backslash
cdot{joint}$}
\end_layout

\begin_layout Plain Layout


\backslash
RETURN joint
\end_layout

\begin_layout Plain Layout


\backslash
end{algorithmic}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard

\series bold
Important note
\series default
: Off course that at our python code we weren't summing all possible sequence
 matrices.
 We used some simple combinatoric 
\end_layout

\begin_layout Standard
to calculate the matrix.
 
\end_layout

\begin_layout Standard
This algorithm was giving well behaved results the acted ass probabilities,
 but it had some issues:
\end_layout

\begin_layout Problem
Run-time and over float issues: we needed to calculate numbers such as 
\begin_inset Formula $4^{n}$
\end_inset

 were 
\begin_inset Formula $n$
\end_inset

 was the length of the series.
 This calculations would take a lot of time, and also can cause to over
 float quite quickly.
 
\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Problem
Dividing and multiply can be numerically unstable.
\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Problem
If the we want to use the algorithm to get joint and conditional probabilities
 from a relatively small amount of data, the data that the user entered
 will be 
\begin_inset Quotes eld
\end_inset

swollen
\begin_inset Quotes erd
\end_inset

 in the initial uniform probability distribution.
 
\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Solution*
Our solution it to multiply the uniform distribution in some constant, which
 we will refer from now on as 
\begin_inset Formula $\delta$
\end_inset

, and calculate the joint probabilities matrix as 
\begin_inset Formula 
\[
joint=\frac{M_{1}+\delta M_{2}}{n+\delta\cdot4^{m}}
\]

\end_inset


\end_layout

\begin_layout Solution*
were 
\begin_inset Formula $M_{2}$
\end_inset

 is the sum off all possible sequence matrices, 
\begin_inset Formula $M_{1}$
\end_inset

is the sum of all the sequence matrices entered by the user, 
\begin_inset Formula $n$
\end_inset

 is the number of sequence matrices entered by the user, and 
\begin_inset Formula $m$
\end_inset

 is the sequence length.
 
\end_layout

\begin_layout Solution*
What we got left is to peak 
\begin_inset Formula $\delta$
\end_inset

 that will satisfy our needs.
 We chose to set 
\begin_inset Formula $\delta$
\end_inset

 as 
\begin_inset Formula 
\[
\delta=\frac{1}{4^{m-mk-1}}
\]

\end_inset


\end_layout

\begin_layout Solution*
were 
\begin_inset Formula $mk$
\end_inset

 is the Markov order we currently working with.
 This multiplication gave as a constant matrix, 
\begin_inset Formula $\delta M$
\end_inset

 that is friendlier to work with: , it's can be used to analyze smaller
 data sets, it's more stable numerically, will take less time to calculate,
 and won't give as over flow that quickly.
 
\end_layout

\begin_layout Solution*
also, 
\begin_inset Formula $\delta\cdot4^{m}=4^{mk+1}$
\end_inset

 what made the calculations more efficient, safe, and reflecting correctly
 smaller data sets.
 
\end_layout

\begin_layout Solution*

\series bold
important note: 
\series default
at out actual implementation in python, we didn't use an actual matrix to
 represent 
\begin_inset Formula $\delta M$
\end_inset

, but instead calculated it's values with a very simple combinatoric and
 multiplication with 
\begin_inset Formula $\delta$
\end_inset

, and then add those values to the sum of sequence matrices entered by the
 user.
 
\end_layout

\begin_layout Standard
The python code for the implementation of the algorithm is: 
\end_layout

\end_body
\end_document
